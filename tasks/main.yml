---
- name: create files directory if it doesn't exist.
  file:
    path: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}/files"
    state: directory
    owner: "{{ deploydrupal_apache_user }}"
    group: "{{ deploydrupal_checkout_user }}"
    mode: 0770
  become: "{{ deploydrupal_files_become }}"

- name: open permissions on site directory.
  file:
    path: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}"
    state: directory
    owner: "{{ deploydrupal_checkout_user }}"
    group: "{{ deploydrupal_checkout_user }}"
    mode: ug+w

- name: open permissions on settings file.
  file:
    path: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}/settings.php"
    state: file
    owner: "{{ deploydrupal_checkout_user }}"
    group: "{{ deploydrupal_checkout_user }}"
    mode: ug+w

- name: get latest code.
  git:
    repo: "{{ deploydrupal_repo }}"
    dest: "{{ deploydrupal_dir }}"
    version: "{{ deploydrupal_version }}"
    update: true
    force: "{{ deploydrupal_git_force }}"
    accept_hostkey: true
  when: "deploydrupal_code"
  notify: clear opcache

- name: check if a composer.json file is present.
  stat: "path={{ deploydrupal_dir }}/composer.json"
  register: deploydrupal_composer_file

# –no-ansi, –no-interaction and –no-progress are always appended.
- name: run composer install if composer.json is present.
  composer:
    command: install
    working_dir: "{{ deploydrupal_dir }}"
    no_dev: "{{ deploydrupal_composer_no_dev_dependencies }}"
  register: composer_output
  when:
    - deploydrupal_composer_file.stat.exists == true
    - deploydrupal_composer_install == true

- name: print composer output
  debug: var=composer_output.stdout_lines

- name: close permissions on default directory.
  file:
    path: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}"
    state: directory
    owner: "{{ deploydrupal_checkout_user }}"
    group: "{{ deploydrupal_checkout_user }}"
    mode: ug-w

- name: close permissions on settings file.
  file:
    path: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}/settings.php"
    state: file
    owner: "{{ deploydrupal_checkout_user }}"
    group: "{{ deploydrupal_checkout_user }}"
    mode: ug-w

- name: update files directory owner and permissions.
  file:
    path: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}/files"
    state: directory
    owner: "{{ deploydrupal_apache_user }}"
    group: "{{ deploydrupal_checkout_user }}"
    mode: 0770
-  become: "{{ deploydrupal_files_become }}"

- name: clear drush cache.
  shell: "{{ deploydrupal_drush_path }} cache-clear drush"
  args:
    chdir: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}"

- name: clear caches.
  shell: "{{ deploydrupal_drush_path }} cache-rebuild"
  args:
    chdir: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}"
  when:
    - not deploydrupal_site_install

# site-install.
- name: install site.
  shell: "{{ deploydrupal_drush_path }} site-install {{ deploydrupal_site_install_config | ternary('--existing-config', '') }} --verbose --yes"
  args:
    chdir: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}"
  when:
    - deploydrupal_site_install

- name: adjust files directory sub-folder permissions after site install.
  file:
    path: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}/files/{{ item }}"
    state: directory
    owner: "{{ deploydrupal_apache_user }}"
    group: "{{ deploydrupal_checkout_user }}"
    mode: 0770
  become: "{{ deploydrupal_files_become }}"
  with_items: "{{ deploydrupal_file_permission_fix_directories }}"

# Import the latest configuration. This includes the latest
# configuration_split configuration. Importing this twice ensures that the
# latter command enables and disables modules based upon the most up to date
# configuration.
- name: import configuration 1/2.
  shell: "{{ deploydrupal_drush_path }} config-import -y"
  args:
    chdir: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}"
  register: drush_output
  when:
    - deploydrupal_config_import

- name: print drush output
  debug: var=drush_output.stdout_lines
  when:
    - deploydrupal_config_import

- name: import configuration 2/2.
  shell: "{{ deploydrupal_drush_path }} config-import -y"
  args:
    chdir: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}"
  register: drush_output
  when:
    - deploydrupal_config_import

- name: print drush output
  debug: var=drush_output.stdout_lines

- name: run database updates.
  shell: "{{ deploydrupal_drush_path }} updatedb -y"
  args:
    chdir: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}"
  when:
    - not deploydrupal_site_install

- name: run theme build tasks.
  shell: "{{ item }}"
  args:
    chdir: "{{ deploydrupal_npm_theme_path }}"
  with_items: "{{ deploydrupal_npm_theme_run_commands }}"
  when:
    - deploydrupal_npm_theme_build
    - deploydrupal_npm_theme_path is defined

- name: clear caches.
  shell: "{{ deploydrupal_drush_path }} cache-rebuild"
  args:
    chdir: "{{ deploydrupal_core_path }}/sites/{{ deploydrupal_site_name }}"
  when:
    - deploydrupal_drush_cache_rebuild

# Save redis data to disk. This is necessary in Docker environments to ensure we
# preserve the correct cache state.
- name: save redis data to disk.
  command: "redis-cli -h {{ deploydrupal_redis_host }} -n 0 SAVE"
  when: "deploydrupal_redis_flush"
